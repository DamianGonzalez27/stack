version: "3.3"
services:
  postgres:
    container_name: postgres
    image: postgres:13
    restart: always
    user: root
    stop_signal: SIGINT
    command: postgres -c max_connections=200
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - kerberus-network

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.3
    container_name: keycloak
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_PORT: 5432
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
    ports:
      - 8080:8080
    command: start-dev
    depends_on:
      - postgres
    volumes:
      - keycloak:/opt/jboss/keycloak/standalone/data
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "10"
    networks:
      - kerberus-network

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis:/data
    networks:
      - kerberus-network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    environment:
      - MONGO_INITDB_DATABASE=admin
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
    ports:
      - 27017:27017
    volumes:
      - mongo:/docker-entrypoint-initdb.d/init-mongo-js:ro
      - mongo:/data/db
    networks:
      - kerberus-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kerberus-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kerberus-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - kerberus-network

  elasticsearch-logs:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
    container_name: elasticsearch-logs
    environment:
      - node.name=elasticsearch-logs
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-logs:/usr/share/elasticsearch/data
    ports:
      - 9201:9200
      - 9301:9300
    networks:
      - kerberus-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - kerberus-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.0
    container_name: logstash
    volumes:
      - ./conf/logstash/configs:/usr/share/logstash/pipeline
      #- ./conf/logstash/pipelines:/usr/share/logstash/config
    environment:
      ELASTICSEARCH_HOST: "http://elasticsearch"
      ELASTICSEARCH_PORT: 9200
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - kerberus-network

  minio:
    image: minio/minio
    container_name: minio
    restart: always
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio:/data
      - ./conf/minio:/root/.minio
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001"
    networks:
      - kerberus-network

  bitwarden:
    image: bitwardenrs/server
    container_name: bitwarden
    environment:
      - WEBSOCKET_ENABLED=true
      - SIGNUPS_ALLOWED=true
      - DOMAIN=http://localhost
      - INIT_ADMIN_PASSWORD=damian # Elige un token seguro
      - INIT_ADMIN_EMAIL=damian27goa@gmail.com
      #- ROCKET_TLS=off # Puedes usar Let's Encrypt o certificados SSL personalizados
    volumes:
      - bitwarden:/data
    ports:
      - 8081:80
      - 3012:3012
    restart: always
    networks:
      - kerberus-network

  proxy-manager:
    image: "jc21/nginx-proxy-manager:latest"
    container_name: proxy-manager
    restart: always
    ports:
      - 80:80
      - 443:443
      - 81:81
    environment:
      DB_MYSQL_HOST: mariadb
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "pmuser"
      DB_MYSQL_PASSWORD: "pmpassword"
      DB_MYSQL_NAME: "pm"
    volumes:
      - proxy:/data
    depends_on:
      - mariadb
    networks:
      - kerberus-network

  mariadb:
    image: jc21/mariadb-aria:latest
    container_name: mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "rootpassword"
      MYSQL_DATABASE: "pm"
      MYSQL_USER: "pmuser"
      MYSQL_PASSWORD: "pmpassword"
    ports:
      - 3306:3306
    volumes:
      - mariadb:/var/lib/mysql
    networks:
      - kerberus-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3099:3000" # Mapeo de puertos (puerto del contenedor:puerto del host)
    volumes:
      - grafana-storage:/var/lib/grafana # Volumen para persistir datos
    environment:
      - GF_SECURITY_ADMIN_USER=admin # Usuario admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # Contrase√±a admin
    networks:
      - kerberus-network

volumes:
  keycloak:
  postgres:
  redis:
  mongo:
  minio:
  elasticsearch:
  elasticsearch-logs:
  bitwarden:
  proxy:
  mariadb:
  grafana-storage:

networks:
  kerberus-network:
    driver: "bridge"
